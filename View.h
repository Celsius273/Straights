#ifndef _VIEW_
#define _VIEW_

#include "Card.h"
#include "Observer.h"
#include "Deck.h"
#include "Player.h"
#include "HumanPlayer.h"
#include "Game.h"
#include "Controller.h"

#include "DeckGUI.h"
#include <gtkmm.h>
#include <vector>

//View class for MVC model
class View: public Observer, public Gtk::Window{
public:
    View(Controller*, Game*);
    virtual ~View(); // free all the cardsOnTable, controller and game_
    virtual void update(Notification n);
private:
    Controller* controller_; // link to controller
    Game* game_; // link to model

    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ///////////////////////////////////// GAME UI COMPONENTS ////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////

    DeckGUI deck; // deck of card images
    Gtk::VBox gameBox; // VBox that contains all game components

    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////// TOP BAR //////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////

    Gtk::HBox topBox;

    Gtk::Button startButton;	// starts game with seed input (0 seed if no seed is supplied)
    Gtk::Entry  nameField; 		// field for entry
    Gtk::Button endButton;		// ends game

    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////// CARDS ON TABLE ///////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////
    Gtk::Frame cardFrame; // name field (constant)

    Gtk::HBox  suitsBox[SUIT_COUNT]; // 4 HBoxes, one for each suit in order of: CLUBS, DIAMONDS, HEARTS, SPADES
    Gtk::Image *cardsOnTable[SUIT_COUNT][RANK_COUNT]; // 4x13 array of all the cards currently on the table
    
    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////// PLAYER BUTTONS ///////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////

    Gtk::HBox playerBox;
    Gtk::VBox playerBoxes[4];
    Gtk::Frame playerFrames[4];
    Gtk::Button playerButtons[4];
    Gtk::Label scoreLabels[4];
    Gtk::Label discardLabels[4];

    std::vector<bool> isPlayerHuman; //boolean vector of player types, true means human, false means computer

    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////// PLAYER'S HAND ////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////

    Gtk::HBox handBox;
    Gtk::Frame handFrame; // name field (constant)
    Gtk::Button cardsInHand[RANK_COUNT];

    ///////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////// BUTTON FUNCTIONS /////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////

    void startButtonClicked(); // linked to startButton
    void endButtonClicked(); // linked to endButton
    void playerButtonClicked(int const); // linked to each of the 4 playerButtons, will pass in index of playerButton
    void cardButtonClicked(int const); // linked to each of the 13 cardButtons in cardsInHand, will pass in index of card to be used

    // to be called by the View only, to decouple the main update function
    void updateTopBar();
    void updatePlayedCards();
    void updatePlayerInfo();
    void updateCardsInHand();
};

#endif